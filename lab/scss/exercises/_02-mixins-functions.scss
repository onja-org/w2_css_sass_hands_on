// ðŸ”§ Exercise 2: Mixins & Functions
// Goal: Create reusable code chunks and calculations

// ==========================================
// STEP 1: CREATE FUNCTIONS
// ==========================================
// Functions return values (numbers, colors, strings, etc.)
// They're like calculators that compute values for your CSS
// This is useful for reducing repetition and making your code more maintainable
// Look at the functions below and think about why they are useful instead of hardcoding values

// TODO: Create a function for responsive font sizes
// NOTE: This function lets us calculate font sizes based on a base size and a scale factor.
// Functions use @function and @return
// @function responsive-font($base-size, $scale-factor: 1.2) {
//   @return $base-size * $scale-factor;
// }

// TODO: Create a function for spacing calculations
// @function spacing($multiplier) {
//   $base-spacing: 1rem;
//   @return $base-spacing * $multiplier;
// }

// TODO: Create a function for color variations
// NOTE: This function allows us to create lighter or darker variations of a base color.
// NOTE: Instead of having to calculate these manually, we can just call this function with the base color and the desired variation.
// @function candy-color($base-color, $variation: 'normal') {
//   @if $variation == 'light' {
//     @return color.adjust($base-color, lightness: 20%);
//   } @else if $variation == 'dark' {
//     @return color.adjust($base-color, $lightness: -20%);
//   } @else {
//     @return $base-color;
//   }
// }

// ==========================================
// STEP 2: CREATE MIXINS
// ==========================================
// Mixins are reusable groups of CSS properties
// Think of them as templates you can customize with parameters
// Every property you write inside of a mixin will be applied to any style where you include the mixin
// We will see examples of including mixins in the CSS below, but just know that you can create a mixin with @mixin and use it with @include

// TODO: Create a mixin for button styles
// NOTE: The 'medium' and '#3498db' here are default values. This means that if you don't specify them when using the mixin, it will use these defaults.
// @mixin button-style($size: medium, $color: #3498db) {
//   display: inline-block;
//   border: none;
//   border-radius: 6px;
//   cursor: pointer;
//   transition: all 0.3s ease;
//   font-weight: bold;
//   text-decoration: none;
//   text-align: center;
//
//   // Use @if to handle different sizes
//   @if $size == small {
//     padding: 8px 16px;
//     font-size: 0.875rem;
//   } @else if $size == medium {
//     padding: 12px 24px;
//     font-size: 1rem;
//   } @else if $size == large {
//     padding: 16px 32px;
//     font-size: 1.125rem;
//   }
//
//   background: $color;
//   color: white;
//
//   &:hover {
//     background: color.adjust($color, $lightness: -10%);
//     transform: translateY(-2px);
//   }
// }

// TODO: Create a mixin for card layouts
// @mixin card-layout($padding: 1.5rem, $shadow: true) {
//   background: white;
//   border-radius: 8px;
//   padding: $padding;
//
//   @if $shadow {
//     box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
//   }
//
//   &:hover {
//     transform: translateY(-2px);
//     @if $shadow {
//       box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
//     }
//   }
// }

// TODO: Create a mixin for flex containers
// @mixin flex-container($direction: row, $justify: center, $align: center, $gap: 1rem) {
//   display: flex;
//   flex-direction: $direction;
//   justify-content: $justify;
//   align-items: $align;
//   gap: $gap;
// }

// ==========================================
// STEP 3: USE YOUR MIXINS AND FUNCTIONS
// ==========================================

// Variables (you can use functions here too!)
$primary-color: #e74c3c;
$secondary-color: #3498db;
$accent-color: #f39c12;

.candy-shop-interface {
    max-width: 1200px;
    margin: 0 auto;
}

.shop-header {
    // TODO: Use your card-layout mixin
    // @include card-layout(2rem, true);
    // @include flex-container(column, center, center, 1.5rem);

    .shop-title {
        margin: 0;
        // TODO: Use your responsive-font function
        // font-size: responsive-font(2rem, 1.5);
        color: #333;
    }

    .shop-buttons {
        // TODO: Use your flex-container mixin
        // @include flex-container(row, center, center, 1rem);
    }
}

// Button classes using your mixin
.btn {
    // TODO: Include your base button style
    // @include button-style();

    // Specific button types
    &.btn-primary {
        // TODO: Use your mixin with primary color
        // @include button-style(medium, $primary-color);
    }

    &.btn-secondary {
        // TODO: Use your mixin with secondary color
        // @include button-style(medium, $secondary-color);
    }

    &.btn-accent {
        // TODO: Use your mixin with accent color
        // @include button-style(medium, $accent-color);
    }

    // Size variations
    &.btn-small {
        // TODO: Use your mixin with small size
        // @include button-style(small, $primary-color);
    }

    &.btn-medium {
        // @include button-style(medium, $secondary-color);
    }

    &.btn-large {
        // @include button-style(large, $accent-color);
    }
}

.featured-section {
    // TODO: Use your card-layout mixin
    // @include card-layout(2rem);
    margin-bottom: 2rem;

    h2 {
        text-align: center;
        color: #333;
        margin-bottom: 2rem;
    }
}

.candy-grid {
    // TODO: Use your flex-container mixin
    // @include flex-container(row, space-around, stretch, 1rem);
    flex-wrap: wrap;
}

.candy-item {
    // TODO: Use your card-layout mixin
    // @include card-layout(1.5rem);
    text-align: center;
    min-width: 200px;
    flex: 1;

    .candy-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    h3 {
        margin: 0 0 1rem 0;
        color: #333;
    }

    // Size variations using functions
    &.size-small {
        // TODO: Use your spacing function
        // padding: spacing(0.75);
    }

    &.size-medium {
        // padding: spacing(1);
    }

    &.size-large {
        // padding: spacing(1.5);
    }
}

.responsive-section {
    // TODO: Use your card-layout mixin
    // @include card-layout(2rem);

    h2 {
        text-align: center;
        color: #333;
        margin-bottom: 2rem;
    }
}

.responsive-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.responsive-card {
    // TODO: Use your card-layout mixin
    // @include card-layout();

    h3 {
        color: $primary-color;
        margin-top: 0;
    }

    p {
        color: #666;
        line-height: 1.6;
    }

    // Responsive adjustments using functions
    @media (max-width: 768px) {
        // TODO: Use your spacing function for mobile
        // padding: spacing(1);
    }

    @media (min-width: 1024px) {
        // TODO: Use your spacing function for desktop
        // padding: spacing(2);
    }
}

// ==========================================
// BONUS: Advanced Mixin with Content Blocks
// ==========================================
// This is an advanced technique - mixins can accept entire blocks of CSS!

// TODO: Create a responsive mixin that accepts content
// @mixin responsive($breakpoint) {
//   @if $breakpoint == mobile {
//     @media (max-width: 767px) {
//       @content;
//     }
//   } @else if $breakpoint == tablet {
//     @media (min-width: 768px) and (max-width: 1023px) {
//       @content;
//     }
//   } @else if $breakpoint == desktop {
//     @media (min-width: 1024px) {
//       @content;
//     }
//   }
// }

// Example usage (uncomment to try):
// .responsive-example {
//   color: red;
//
//   @include responsive(mobile) {
//     color: blue;
//     font-size: 14px;
//   }
//
//   @include responsive(desktop) {
//     color: green;
//     font-size: 18px;
//   }
// }

// ==========================================
// REFLECTION QUESTIONS
// ==========================================
/*
After completing this exercise, think about:

1. How many times did you write button styles?
   - Without mixins: Every single button class
   - With mixins: Once in the mixin, then just @include everywhere

2. What happens when you want to change button styling?
   - Without mixins: Update every button class individually
   - With mixins: Change the mixin once, all buttons update

3. How do functions help with calculations?
   - Static values: Hard to maintain and adjust
   - Function values: Change the base value, everything scales

4. What's the difference between mixins and functions?
   - Functions: Return single values (colors, sizes, numbers)
   - Mixins: Return groups of CSS properties (entire style blocks)

5. Look at the compiled CSS - how do your mixins become regular CSS?

This is DRY (Don't Repeat Yourself) programming applied to CSS!
*/
